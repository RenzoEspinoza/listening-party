{"version":3,"sources":["components/SongSearch.js","components/SongPool.js","components/Song.js","components/NowPlaying.js","components/AvailableDevices.js","App.js","serviceWorker.js","index.js"],"names":["SongSearch","props","useState","query","setQuery","class","onSubmit","e","preventDefault","length","search","type","placeholder","onChange","target","value","xmlns","viewBox","d","style","height","autoHide","componentList","SongPool","obj","isEmpty","Song","src","cover","alt","overflow","whiteSpace","title","artist","millis","minutes","Math","floor","seconds","toFixed","millisToMin","duration","button","PoolSong","JSON","parse","sessionStorage","getItem","id","isClicked","setClicked","React","useEffect","setItem","stringify","onClick","voteUpdate","voteCount","SearchResultSong","songData","addSong","NowPlaying","song","currentSong","DisplaySong","gridTemplateColumns","connect","width","customStyles","content","top","left","right","bottom","marginRight","transform","overlay","backgroundColor","AvailableDevices","closeModal","setIsOpen","getDevices","isOpen","modalIsOpen","onRequestClose","deviceList","map","device","Device","startListening","name","key","Modal","setAppElement","socket","App","poolList","setPoolList","searchResult","setSearchResult","setCurrentSong","setDeviceList","activeDevice","useRef","accessToken","loggedIn","refreshToken","setRefreshToken","filter","emit","error","alert","playSong","songId","deviceParam","position","deviceId","device_id","axios","url","method","data","uris","position_ms","headers","current","params","then","res","console","log","catch","response","message","refreshUserToken","status","request","vote","get","baseUrl","io","on","pool","URLSearchParams","window","location","removeItem","disconnect","poolComponentList","searchComponentList","gridTemplateRows","getAvailableDevices","devices","href","input","artists","duration_ms","album","images","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25ad128f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Scrollbars from \"react-custom-scrollbars\"\r\nimport { useState } from \"react\"\r\n\r\nexport default function SongSearch(props){\r\n    const [query, setQuery] = useState('')\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        if(query.length > 0) props.search(query)\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setQuery(e.target.value)\r\n    }\r\n    return(\r\n        <div class=\" max-w-sm  pl-4 pr-2 shadow rounded-lg bg-white\">\r\n            <div class=\"flex items-center relative justify-center py-2\" >\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" placeholder=\"Search for a song\" class=\"rounded-lg focus:outline-none\" onChange={handleChange}></input>\r\n                    <button type=\"submit\" class=\"focus:outline-none \" >\r\n                        <svg class=\"h-4 w-4 fill-current text-gray-600\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                        <path d=\"M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\"/>\r\n                        </svg>\r\n                    </button>\r\n                </form>\r\n                \r\n            </div>\r\n            <div style={{height: '26rem'}}>\r\n                <Scrollbars autoHide>\r\n                    {props.componentList}\r\n                </Scrollbars>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n\r\n    \r\n}\r\n\r\n","import React from \"react\"\r\nimport Scrollbars from \"react-custom-scrollbars\"\r\n\r\nexport default function SongPool(props){\r\n    function isEmpty(obj) {\r\n            if(obj.length===0){\r\n                return(\r\n                    <p class=\"text-center antialiased text-gray-900 text-3xl font-semibold\">\r\n                    The song pool is currently empty, search for a song and add it to the pool to get started\r\n                    </p>\r\n                )\r\n            }\r\n    }\r\n    \r\n    return(\r\n            <div class=\"max-w-sm shadow rounded-lg bg-white p-4 pt-6\" style={{height: '28.5rem'}}>   \r\n                <Scrollbars autoHide>\r\n                    {isEmpty(props.componentList)}\r\n                    {props.componentList}\r\n                </Scrollbars>\r\n            </div>\r\n    )\r\n    \r\n}","import React from \"react\"\r\nimport { useState } from \"react\"\r\n\r\nfunction millisToMin(millis) {\r\n    const minutes = Math.floor(millis / 60000)\r\n    const seconds = ((millis % 60000) / 1000).toFixed(0)\r\n    return (seconds === 60 ? (minutes+1) + \":00\" : minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds)\r\n}\r\n\r\nfunction Song(props){\r\n    return(\r\n        <div class=\"flex py-2 items-center border-t\">\r\n            <img src={props.cover} alt=\"album cover\" class=\" w-20 mr-4\"/>\r\n            <div class=\"antialised mr-8 text-sm\" style={{overflow:'hidden', whiteSpace:'nowrap'}}>\r\n                <p class=\"text-gray-900 font-semibold pb-1\" >{props.title} </p>\r\n                <p class=\"text-gray-600 pb-1\">{props.artist}</p>\r\n                <p class=\"text-gray-400 pb-1\">{millisToMin(props.duration)}</p>\r\n            </div>\r\n            {props.button}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function QueueSong(props){\r\n    return(\r\n        <Song title={props.title} artist={props.artist} duration={props.duration} cover = {props.cover}\r\n        button = \r\n        {\r\n        <button class=\"ml-auto mr-3 focus:outline-none\">\r\n            <svg class=\"h-4 w-4 fill-current text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\"/>\r\n            </svg>\r\n        </button>\r\n        }\r\n        />\r\n    )\r\n}\r\n\r\nexport function PoolSong(props){\r\n    const [isClicked, setClicked] = useState(() => JSON.parse(sessionStorage.getItem(props.id)) || false)\r\n\r\n    React.useEffect(() => {\r\n        sessionStorage.setItem(props.id, JSON.stringify(isClicked))\r\n      }, [isClicked]\r\n    );\r\n\r\n    const handleClick = e =>{\r\n        if(isClicked){\r\n            props.voteUpdate(props.id, -1)\r\n            setClicked(false)\r\n        }\r\n        else{\r\n            props.voteUpdate(props.id, 1)\r\n            setClicked(true)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Song title={props.title} artist={props.artist} duration={props.duration} cover = {props.cover}\r\n        button = \r\n        {<div class=\"flex ml-auto mr-3 items-center\">\r\n            <button onClick={(e) => handleClick(e)} class=\"mr-1 focus:outline-none\">\r\n                <svg class={isClicked ? 'h-5 w-5 fill-current text-blue-400' : 'h-5 w-5 fill-current text-gray-500'} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                    <path d=\"M7 10v8h6v-8h5l-8-8-8 8h5z\"/>\r\n                </svg>\r\n            </button>\r\n            <p class=\"font-semibold text-gray-600\">{props.voteCount}</p>\r\n        </div>\r\n        }\r\n        />\r\n    )\r\n    \r\n}\r\n\r\nexport function SearchResultSong(props){\r\n    const handleClick= e => {\r\n        const songData={id:props.id, title:props.title, artist:props.artist, duration:props.duration, cover: props.cover}\r\n        props.addSong(songData)\r\n    }\r\n    \r\n    \r\n\r\n    return(\r\n        <Song title={props.title} artist={props.artist} duration={props.duration} cover = {props.cover}\r\n        button = \r\n        {<button onClick={handleClick} class=\" ml-auto mr-3 focus:outline-none\">\r\n        <svg class=\"h-4 w-4 fill-current text-blue-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n            <path d=\"M11 9h4v2h-4v4H9v-4H5V9h4V5h2v4zm-1 11a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z\"/>\r\n        </svg>\r\n        </button>\r\n        }\r\n        />\r\n    )\r\n    \r\n} \r\n","import React from 'react'\r\n\r\nexport default function NowPlaying(props){\r\n    const song = props.currentSong\r\n    \r\n    function DisplaySong(){\r\n        if(song){\r\n            return (\r\n                <div class=\"grid grid-flow-col gap-0\" style={{gridTemplateColumns: '25% auto 10%'}}>\r\n                    <img src={song.cover} alt=\"album cover\" class=\"row-span-3 w-40\"/>\r\n                    <div class=\"antialised mr-8 text-4xl row-span-2\" style={{overflow:'hidden', whiteSpace:'nowrap'}}>\r\n                        <p class=\"text-gray-900 font-semibold pb-1\" >{song.title} </p>\r\n                        <p class=\"text-gray-600 pb-1\">{song.artist}</p>\r\n                    </div>\r\n                    {props.connect}\r\n                </div>\r\n        )\r\n        }\r\n        else return <div style={{height: '10rem'}}>\r\n        </div>\r\n    }\r\n\r\n    return(\r\n        <div class=\"bg-white p-6 \" style={{width: '48rem'}}>\r\n            <DisplaySong></DisplaySong>\r\n        </div>\r\n        \r\n    )\r\n    \r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)'\r\n  },\r\n  overlay: {\r\n      backgroundColor: 'rgba(26, 32, 44, 0.5)'\r\n  }\r\n};\r\n\r\nModal.setAppElement('body')\r\n\r\nexport default function AvailableDevices(props) {\r\n  \r\n  function openModal() {\r\n      props.setIsOpen(true)\r\n  }\r\n  function closeModal(){\r\n      props.setIsOpen(false)\r\n  }\r\n  \r\n  function getDevices(){\r\n      props.getDevices()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={getDevices} class=\" focus:outline-none outline-none bg-transparent text-green-600 border border-green-600 font-bold py-2 px-4 rounded inline-flex items-center justify-center hover:bg-green-600 hover:border-transparent hover:text-white\">\r\n          <span>Start listening with Spotify Connect</span> \r\n      </button>\r\n      <Modal\r\n        isOpen={props.modalIsOpen}\r\n        onRequestClose={closeModal}\r\n        style={customStyles}\r\n      >\r\n      <div>\r\n          <div class=\"px-6 border-gray-600 border-b\">\r\n              <p class=\"text-gray-700 font-bold text-xl\">Choose a device to listen on</p>\r\n          </div>\r\n          <ul class=\" my-2 border\">\r\n              {props.deviceList.map(device => (<Device closeModal={closeModal} startListening={props.startListening} id={device.id} name={device.name} type={device.type}></Device>))}\r\n          </ul>\r\n      </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nfunction Device(props){\r\n  function handleClick(){\r\n    props.closeModal()\r\n    props.startListening(props.id)\r\n  }\r\n\r\n  return(\r\n    <li key={props.id} onClick={handleClick}>Name: {props.name} Type: {props.type}</li>\r\n  )\r\n}","import React, {useState, useEffect, useRef} from 'react'\nimport SongSearch from './components/SongSearch'\nimport SongPool from './components/SongPool'\nimport {PoolSong, SearchResultSong} from './components/Song'\nimport NowPlaying from './components/NowPlaying'\nimport AvailableDevices from './components/AvailableDevices'\nimport axios from 'axios'\nimport io from 'socket.io-client'\n\n\nconst baseUrl = '/api/'\nlet socket\n\nconst App = () => {\n  const [poolList, setPoolList] = useState([])\n  const [searchResult, setSearchResult] = useState([])\n  const [currentSong, setCurrentSong] = useState(null)\n  const [deviceList, setDeviceList] = useState([])\n  const [modalIsOpen,setIsOpen] = useState(false)\n\n  const activeDevice = useRef(null)\n  const accessToken = useRef(null)\n  const loggedIn = useRef(false)\n  const [refreshToken, setRefreshToken] = useState(null)\n\n\n  useEffect(() => {\n    getSongPool()\n    getCurrentSong()\n    socket = io().connect()\n    socket.on('pool update', pool => {\n      setPoolList(pool)\n    })\n    const params = new URLSearchParams(window.location.search)\n    console.log('params', params);\n    accessToken.current= params.get('access_token')\n    console.log('access token', accessToken.current)\n    if(accessToken.current){\n      loggedIn.current = true\n      console.log('refresh token',new URLSearchParams(window.location.search).get('refresh_token'))\n      setRefreshToken(new URLSearchParams(window.location.search).get('refresh_token'))\n    }\n    socket.on('play song', song => {\n      if(activeDevice.current){\n        console.log('attempting to play')\n        playSong(song.id)\n      }\n      setCurrentSong(song)\n      sessionStorage.removeItem(song.id)\n    })\n    \n    return () => socket.disconnect()\n  }, [])\n\n  function addSong(songData){\n    setSearchResult(searchResult => searchResult.filter(song => song.id !== songData.id))\n    socket.emit('song add', songData, error => {\n      if(error) {\n        alert(error)\n      }\n    })\n  }\n\n  function playSong(songId, position = 0, deviceId) {\n    let deviceParam\n    if(deviceId) deviceParam = {device_id : deviceId}\n    else (deviceParam = {})\n\n    axios({\n      url: 'https://api.spotify.com/v1/me/player/play',\n      method: 'PUT',\n      data: {\n        uris : [`spotify:track:${songId}`],\n        position_ms : position\n      },\n      headers: {\n        'Authorization': `Bearer ${accessToken.current}`\n      },\n      params: deviceParam\n    }).then(res =>{\n      console.log(res)\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response.data)\n        if(error.response.data.error.message === \"The access token expired\"){\n          console.log('expired token');\n          refreshUserToken()\n          playSong()\n        }\n        console.log(error.response.status)\n        console.log(error.response.headers)\n      } else if (error.request) {\n        console.log(error.request)\n      } else {\n        console.log('Error', error.message)\n      }\n    })\n  }\n\n  function getSongPool(){\n    axios.get(baseUrl + 'pool')\n    .then(res => {\n      setPoolList(res.data)\n    })\n  }\n\n  function getCurrentSong(){\n    axios.get(baseUrl + 'currentSong')\n    .then(res => {\n      if(res.data) {\n        console.log(res.data)\n        setCurrentSong(res.data)\n      }\n    })\n  }\n\n  function search(input){\n    axios.get(baseUrl + `search/${input}`)\n    .then(res => {\n      console.log(res.data)\n      const searchResult = res.data.map(song => {\n        return ({id : song.id, title: song.name, artist: song.artists[0].name, duration: song.duration_ms, cover: song.album.images[0].url})\n      })\n      console.log('search result', searchResult)\n      setSearchResult(searchResult)\n    })\n    \n  }\n\n  function voteUpdate(id,vote){\n    socket.emit('vote change', id, vote)\n  }\n\n  function startListening(deviceId){\n    activeDevice.current = deviceId\n    axios.get(baseUrl + 'elapsedTime')\n    .then(res => {\n      playSong(currentSong.id, res.data, activeDevice.current)\n    })\n  }\n  \n  \n  function getAvailableDevices(){\n    let devices\n    \n    axios({\n      url: 'https://api.spotify.com/v1/me/player/devices',\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${accessToken.current}`\n      }\n    }).then(res =>{\n      console.log('list of devices', res.data.devices)\n      setDeviceList(res.data.devices)\n      setIsOpen(true)\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response.data)\n        // \"The access token expired\"\n        if(error.response.data.error.message === \"The access token expired\"){\n          console.log('expired token');\n          refreshUserToken()\n          getAvailableDevices()\n        }\n        console.log(error.response.status)\n        console.log(error.response.headers)\n      } else if (error.request) {\n        console.log(error.request)\n      } else {\n        console.log('Error', error.message)\n      }\n    })\n  }\n\n  function refreshUserToken(){\n    axios.get(baseUrl +`refreshToken/${refreshToken}` )\n    .then(res => {\n      accessToken.current = res.data\n    }).catch(error => {\n      console.log(error.response.data);\n      console.log(error.response.status)\n      console.log(error.response.headers)\n    })\n  }\n\n  const poolComponentList = poolList.map(song => (\n      <PoolSong id={song.id} title={song.title} artist={song.artist} duration={song.duration} voteCount={song.voteCount} voteUpdate={voteUpdate} cover = {song.cover} key={song.id} />))\n\n  const searchComponentList = searchResult.map(song => (\n        <SearchResultSong id={song.id} title={song.title} artist={song.artist} duration={song.duration} key={song.id} addSong={addSong} cover={song.cover} />))\n  \n  return (\n    \n    <div class=\"flex justify-center\">\n        <div class=\" grid grid-rows-2 grid-cols-2\" style={{gridTemplateRows: '36% auto'}}>\n          \n          <div class=\"col-span-2 p-2 pt-6\">\n            <NowPlaying \n              connect={loggedIn.current ?\n                (\n                  <AvailableDevices modalIsOpen={modalIsOpen} setIsOpen={setIsOpen} deviceList={deviceList} getDevices={getAvailableDevices} startListening={startListening} ></AvailableDevices>\n                ) : \n                (\n                  <button onClick={() => {window.location.href='/auth/spotify'}} class=\"focus:outline-none outline-none bg-transparent text-green-600 border border-green-600 font-bold py-2 px-4 rounded inline-flex justify-center items-center hover:bg-green-600 hover:border-transparent hover:text-white\">\n                    <svg class=\"fill-current w-6 h-6 mr-2 \" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19.098 10.638c-3.868-2.297-10.248-2.508-13.941-1.387-.593.18-1.22-.155-1.399-.748-.18-.593.154-1.22.748-1.4 4.239-1.287 11.285-1.038 15.738 1.605.533.317.708 1.005.392 1.538-.316.533-1.005.709-1.538.392zm-.126 3.403c-.272.44-.847.578-1.287.308-3.225-1.982-8.142-2.557-11.958-1.399-.494.15-1.017-.129-1.167-.623-.149-.495.13-1.016.624-1.167 4.358-1.322 9.776-.682 13.48 1.595.44.27.578.847.308 1.286zm-1.469 3.267c-.215.354-.676.465-1.028.249-2.818-1.722-6.365-2.111-10.542-1.157-.402.092-.803-.16-.895-.562-.092-.403.159-.804.562-.896 4.571-1.045 8.492-.595 11.655 1.338.353.215.464.676.248 1.028zm-5.503-17.308c-6.627 0-12 5.373-12 12 0 6.628 5.373 12 12 12 6.628 0 12-5.372 12-12 0-6.627-5.372-12-12-12z\"/></svg>\n                    <span>Login with Spotify Premium to start listening</span>\n                  </button>\n                )\n              } currentSong={currentSong}>\n            </NowPlaying>\n          </div>\n          <div class=\"p-2 row-start-2\">\n            <SongSearch search={search} componentList={searchComponentList}/>\n          </div>\n          <div class=\"p-2 row-start-2\">\n            <SongPool componentList={poolComponentList}/>\n          </div>\n        </div>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}